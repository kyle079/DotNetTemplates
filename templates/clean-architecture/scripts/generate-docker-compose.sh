#!/bin/bash
#
# Generates a docker-compose.yml file based on available docker compose files.
#
# This script creates a main docker-compose.yml that includes all the service
# files found in the docker directory.
#
# Usage: ./scripts/generate-docker-compose.sh
#

set -e

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"
DOCKER_DIR="$ROOT_DIR/docker"
OUTPUT_FILE="$ROOT_DIR/docker-compose.yml"

# Find all docker-compose files in the docker directory
DOCKER_FILES=($(find "$DOCKER_DIR" -name "docker-compose.*.yml" -type f | sort))

if [ ${#DOCKER_FILES[@]} -eq 0 ]; then
    echo -e "\033[33mWarning: No docker-compose files found in $DOCKER_DIR\033[0m"
    exit 0
fi

# Generate the docker-compose.yml content
cat > "$OUTPUT_FILE" << 'EOF'
version: '3.8'

# This file is auto-generated by generate-docker-compose.sh
# To customize, create a docker-compose.override.yml file

include:
EOF

# Add each docker-compose file
for file in "${DOCKER_FILES[@]}"; do
    RELATIVE_PATH="docker/$(basename "$file")"
    echo "  - $RELATIVE_PATH" >> "$OUTPUT_FILE"
done

# Add comments about running services individually
cat >> "$OUTPUT_FILE" << 'EOF'

# The 'include' directive requires Docker Compose v2.20.0 or later
# If you're using an older version, you can run services individually:
EOF

# Add individual service commands
for file in "${DOCKER_FILES[@]}"; do
    FILENAME=$(basename "$file")
    echo "# docker-compose -f docker/$FILENAME up -d" >> "$OUTPUT_FILE"
done

# Show success message
echo -e "\033[32m[OK] Generated docker-compose.yml with the following services:\033[0m"
for file in "${DOCKER_FILES[@]}"; do
    SERVICE_NAME=$(basename "$file" | sed 's/docker-compose\.\(.*\)\.yml/\1/')
    echo -e "  \033[37m- $SERVICE_NAME\033[0m"
done